openapi: 3.0.0
info:
  version: '1'
  title: Kinde Management API
  description: Provides endpoints to manage your Kinde Businesses
  termsOfService: https://kinde.com/docs/important-information/terms-of-service
  contact:
    name: Kinde Support Team
    email: support@kinde.com
    url: https://kinde.com/docs
servers:
  - url: https://{businessName}.kinde.com/
    variables:
      businessName:
        default: app
        description: Business name created in the Kinde admin area.
security:
  - kindeBearerAuth: []
tags:
  - name: Users
    description: Everything about your end-users.
paths:
  /oauth2/user_profile:
    get:
      tags:
        - OAuth
      operationId: getUser
      description: |
        Contains the id, names and email of the currently logged in user.
      summary: Returns the details of the currently logged in user
      responses:
        '200':
          description: Details of logged in user V1.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile'
        '403':
          description: Invalid credentials.
  /oauth2/v2/user_profile:
    get:
      tags:
        - OAuth
      operationId: getUserProfileV2
      description: |
        Contains the id, names, profile picture URL and email of the currently logged in user.
      summary: Returns the details of the currently logged in user
      responses:
        '200':
          description: Details of logged in user V2.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile_v2'
        '403':
          description: Invalid credentials.
  /api/v1/users:
    get:
      tags:
        - Users
      operationId: getUsers
      description: |
        The returned list can be sorted by full name or email address
        in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query
        string parameter.
      summary: List Users
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: user_id
          in: query
          description: ID of the user to filter by.
          schema:
            type: string
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Users successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Response code.
                  message:
                    type: string
                    description: Response message.
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
                  next_token:
                    type: string
                    description: Pagination token.
        '403':
          description: Invalid credentials.
  /api/v1/user:
    get:
      tags:
        - Users
      operationId: getUserData
      description: |
        Retrieve a user record.
      summary: Get User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    post:
      tags:
        - Users
      operationId: createUser
      description: |
        Creates a user record and optionally zero or more identities for the user. An example identity could be the email
        address of the user.
      summary: Create User
      requestBody:
        description: The details of the user to create.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  description: Basic information required to create a user.
                  type: object
                  properties:
                    given_name:
                      type: string
                      description: User's first name.
                    family_name:
                      type: string
                      description: User's last name.
                identities:
                  type: array
                  description: Array of identities to assign to the created user
                  items:
                    type: object
                    description: The result of the user creation operation.
                    properties:
                      'type':
                        type: string
                        description: The type of identity to create, for e.g. email.
                      details:
                        type: object
                        description: Additional details required to create the user.
                        properties:
                          email:
                            type: string
                            description: The email address of the user.
      responses:
        '200':
          description: User successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique id of the user in Kinde.
                    type: string
                  created:
                    description: True if the user was successfully created.
                    type: boolean
                  identities:
                    type: array
                    items:
                      $ref: '#/components/schemas/user_identity'
        '400':
          description: Error creating user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    patch:
      tags:
        - Users
      operationId: updateUser
      description: |
        Update a user record.
      summary: Update User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      requestBody:
        description: The user to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                given_name:
                  type: string
                  description: User's first name.
                family_name:
                  type: string
                  description: User's last name.
      responses:
        '200':
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    delete:
      tags:
        - Users
      operationId: deleteuser
      description: |
        Delete a user record.
      summary: Delete User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: User successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/organization:
    get:
      tags:
        - Organizations
      operationId: getOrganization
      description: |
        Gets an organization given the organization's code.
      summary: Get Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: Organization successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    post:
      tags:
        - Organizations
      operationId: createOrganization
      description: Create an organization.
      summary: Create Organization
      requestBody:
        description: Organization details.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The organization's name.
                  type: string
                feature_flags:
                  type: object
                  description: The organization's feature flag settings.
                  additionalProperties:
                    type: string
                    enum: [str, int, bool]
                    description: Value of the feature flag.
      responses:
        '201':
          description: Organization successfully created.
        '403':
          description: Invalid credentials.
        '400':
          description: Error creating user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Could not create organization.
  /api/v1/organizations:
    get:
      tags:
        - Organizations
      operationId: getOrgainzations
      description: |
        Get a list of organizations.
      summary: List Organizations
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: A successful response with a list of organizations or an empty list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Response code.
                  message:
                    type: string
                    description: Response message.
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/organization'
                  next_token:
                    description: Pagination token.
                    type: string
        '403':
          description: Invalid credentials.
  /api/v1/organization/users:
    get:
      tags:
        - Organizations
        - Users
      operationId: GetOrganizationUsers
      description: Get users in an organization.
      summary: List Organization Users
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: A succesful response with a list of organization users or an empty list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Response code.
                  message:
                    type: string
                    description: Response message.
                  organization_users:
                    type: array
                    items:
                      $ref: '#/components/schemas/organization_user'
                  next_token:
                    type: string
                    description: Pagination token.
        '400':
          description: Error creating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    post:
      tags:
        - Organizations
        - Users
      operationId: AddOrganizationUsers
      description: Add existing users to an organization.
      summary: Assign Users to an Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: List of user ids to be added to the organization.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Users successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Response code.
                  message:
                    type: string
                    description: Response message.
                  users_added:
                    type: array
                    items:
                      type: string
        '204':
          description: No users added.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    patch:
      tags:
        - Organizations
        - Users
      operationId: RemoveOrganizationUsers
      description: Remove existing users from an organization.
      summary: Remove Users from an Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: List of user ids to be removed from the organization.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Users successfully removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users_added:
                    type: array
                    items:
                      type: string
        '400':
          description: Error creating user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/connected_apps/auth_url:
    get:
      tags:
        - Connected Apps
      operationId: GetConnectedAppAuthUrl
      description: Get a URL that authenticates and authorizes a user to a third-party connected app.
      summary: Get Connected App URL
      parameters:
        - name: key_code_ref
          in: query
          description: The unique key code reference of the connected app to authenticate against.
          schema:
            type: string
            nullable: false
          required: true
        - name: user_id
          in: query
          description: The id of the user that needs to authenticate to the third-party connected app.
          schema:
            type: integer
            nullable: false
          required: true
      responses:
        '200':
          description: A URL that can be used to authenticate and a session id to identify this authentication session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connected_apps_auth_url'
        '403':
          description: Invalid credentials.
  /api/v1/connected_apps/token:
    get:
      tags:
        - Connected Apps
      operationId: GetConnectedAppToken
      description: Get an access token that can be used to call the third-party provider linked to the connected app.
      summary: Get Connected App Token
      parameters:
        - name: session_id
          in: query
          description: The unique sesssion id reprensenting the login session of a user.
          schema:
            type: string
            nullable: false
          required: true
      responses:
        '200':
          description: An access token that can be used to query a third-party provider, as well as the token's expiry time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connected_apps_access_token'
        '400':
          description: The session id provided points to an invalid session.
        '403':
          description: Invalid credentials.
  /api/v1/connected_apps/revoke:
    post:
      tags:
        - Connected Apps
      operationId: RevokeConnectedAppToken
      description: Revoke the tokens linked to the connected app session.
      summary: Revoke Connected App Token
      parameters:
        - name: session_id
          in: query
          description: The unique sesssion id reprensenting the login session of a user.
          schema:
            type: string
            nullable: false
          required: true
      responses:
        '200':
          description: An access token that can be used to query a third-party provider, as well as the token's expiry time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_result'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_result'
        '403':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_result'
        '405':
          description: Invalid HTTP method used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_result'
  /api/v1/feature_flags:
    post:
      tags:
        - Feature Flags
      operationId: CreateFeatureFlag
      description: Create feature flag.
      summary: Create a new feature flag
      parameters:
        - name: name
          in: query
          description: The name of the flag.
          schema:
            type: string
            nullable: false
          required: true
        - name: description
          in: query
          description: Description of the flag purpose.
          schema:
            type: string
            nullable: false
          required: true
        - name: key
          in: query
          description: The flag identifier to use in code.
          schema:
            type: string
            nullable: false
          required: true
        - name: type
          in: query
          description: The variable type.
          schema:
            type: string
            enum: [str, int, bool]
            nullable: false
          required: true
        - name: allow_override_level
          in: query
          description: Allow the flag to be overridden at a different level.
          schema:
            type: string
            enum: [env, org]
            nullable: false
          required: true
        - name: default_value
          in: query
          description: Default value for the flag used by environments and organizations.
          schema:
            type: string
            nullable: false
          required: true
      responses:
        '201':
          description: Feature flag successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/feature_flags/{feature_flag_key}:
    delete:
      tags:
        - Feature Flags
      operationId: DeleteFeatureFlag
      description: Delete feature flag
      summary: Delete a feature flag
      parameters:
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    put:
      tags:
        - Feature Flags
      operationId: UpdateFeatureFlag
      description: Update feature flag.
      summary: Update a feature flag
      parameters:
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The name of the flag.
          schema:
            type: string
            nullable: false
          required: true
        - name: description
          in: query
          description: Description of the flag purpose.
          schema:
            type: string
            nullable: false
          required: true
        - name: key
          in: query
          description: The flag identifier to use in code.
          schema:
            type: string
            nullable: false
          required: true
        - name: type
          in: query
          description: The variable type
          schema:
            type: string
            enum: [str, int, bool]
            nullable: false
          required: true
        - name: allow_override_level
          in: query
          description: Allow the flag to be overridden at a different level.
          schema:
            type: string
            enum: [env, org]
            nullable: false
          required: true
        - name: default_value
          in: query
          description: Default value for the flag used by environments and organizations.
          schema:
            type: string
            nullable: false
          required: true
      responses:
        '200':
          description: Feature flag successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/organizations/{org_code}/feature_flags:
    delete:
      tags:
        - Organizations
      operationId: DeleteOrganizationFeatureFlagOverrides
      description: Delete all organization feature flag overrides.
      summary: Delete all organization feature flag overrides
      parameters:
        - name: org_code
          in: path
          description: The identifier for the organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag overrides successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}:
    delete:
      tags:
        - Organizations
      operationId: DeleteOrganizationFeatureFlagOverride
      description: Delete organization feature flag override.
      summary: Delete organization feature flag override
      parameters:
        - name: org_code
          in: path
          description: The identifier for the organization.
          required: true
          schema:
            type: string
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag override successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    patch:
      tags:
        - Organizations
      operationId: UpdateOrganizationFeatureFlagOverride
      description: Update organization feature flag override.
      summary: Update organization feature flag override
      parameters:
        - name: org_code
          in: path
          description: The identifier for the organization
          required: true
          schema:
            type: string
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: Override value
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag override successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/environment/feature_flags/:
    delete:
      tags:
        - Environments
      operationId: DeleteEnvironementFeatureFlagOverrides
      description: Delete all environment feature flag overrides.
      summary: Delete all environment feature flag overrides
      responses:
        '200':
          description: Feature flag overrides deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
  /api/v1/environment/feature_flags/{feature_flag_key}:
    delete:
      tags:
        - Environments
      operationId: DeleteEnvironementFeatureFlagOverride
      description: Delete environment feature flag override.
      summary: Delete environment feature flag override
      parameters:
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
    patch:
      tags:
        - Environments
      operationId: UpdateEnvironementFeatureFlagOverride
      description: Update environment feature flag override.
      summary: Update environment feature flag override
      parameters:
        - name: feature_flag_key
          in: path
          description: The identifier for the feature flag.
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: The override value for the feature flag.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature flag override successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_response'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '403':
          description: Invalid credentials.
components:
  schemas:
    success_response:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
    error:
      type: object
      properties:
        code:
          type: string
          description: Error code.
        message:
          type: string
          description: Error message.
    error_response:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/error'
    user:
      type: object
      properties:
        id:
          type: string
          description: Unique id of the user in Kinde.
        email:
          type: string
          description: Default email address of the user in Kinde.
        last_name:
          type: string
          description: User's last name.
        first_name:
          type: string
          description: User's first name.
        is_suspended:
          type: boolean
          description: Whether the user is currently suspended or not.
        picture:
          type: string
          description: User's profile picture URL.
    users:
      type: array
      description: Array of users.
      items:
        $ref: '#/components/schemas/user'
    user_identity:
      type: object
      properties:
        'type':
          type: string
          description: The type of identity object created.
        result:
          type: object
          description: The result of the user creation operation.
          properties:
            created:
              type: boolean
              description: True if the user identity was successfully created.
            identity_id:
              type: integer
              description: Unique id of the user's identity in Kinde.
    user_profile:
      type: object
      properties:
        id:
          type: string
          description: Unique id of the user in Kinde.
        preferred_email:
          type: string
          description: Default email address of the user in Kinde.
        provided_id:
          type: string
          description: Value of the user's id in a third-party system when the user is imported into Kinde.
          nullable: true
        last_name:
          type: string
          description: User's last name.
        first_name:
          type: string
          description: User's first name.
    user_profile_v2:
      type: object
      properties:
        id:
          type: string
          description: Unique id of the user in Kinde.
        provided_id:
          type: string
          description: Value of the user's id in a third-party system when the user is imported into Kinde.
          nullable: true
        name:
          type: string
          description: Users's first and last name separated by a space.
        given_name:
          type: string
          description: User's first name.
        family_name:
          type: string
          description: User's last name.
        updated_at:
          type: integer
          description: Date the user was last updated at (In Unix time).
        email:
          type: string
          description: User's email address if available.
    organization:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        is_default:
          type: boolean
    organizations:
      type: array
      items:
        $ref: '#/components/schemas/organization'
    organization_user:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        full_name:
          type: string
        last_name:
          type: string
        first_name:
          type: string
    organization_users:
      type: array
      items:
        $ref: '#/components/schemas/organization_user'
    connected_apps_auth_url:
      type: object
      properties:
        url:
          type: string
          description: A URL that is used to authenticate an end-user against a connected app.
        session_id:
          type: string
          description: A unique identifier for the login session.
    connected_apps_access_token:
      type: object
      properties:
        access_token:
          type: string
          description: The access token to access a third-party provider.
        access_token_expiry:
          type: string
          description: The date and time that the access token expires.
    api_result:
      type: object
      properties:
        result:
          type: string
          description: The result of the api operation.
  securitySchemes:
    kindeBearerAuth:
      description: |
        Accessing the API requires obtaining an access token when login in through Kinde. However, management functions (for e.g. user management) requires an access token
        obtained using the client_credentials flow.
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header